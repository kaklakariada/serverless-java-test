
apply plugin: 'java'

repositories {
    jcenter()
}

version = '0.0.1'

ext {
    uploadPrefix = System.currentTimeMillis()
}

dependencies {
    compile 'com.amazonaws:aws-lambda-java-core:1.1.0'
    compile 'org.slf4j:slf4j-api:1.7.19'
    //compile 'com.amazonaws:aws-lambda-java-events:1.3.0'
    
    //runtime 'org.slf4j:slf4j-log4j12:1.7.19'
    //runtime 'com.amazonaws:aws-lambda-java-log4j:1.0.0'
}


task buildZip(type: Zip) {
    description 'Builds the zip file for upload'
    baseName = "hello"
    from compileJava
    from processResources
    into('lib') {
        from configurations.runtime
    }
}

task uploadZip(type: S3UploadTask, dependsOn: buildZip) {
  region = awsregion
  bucket = binarybucket
  prefix = uploadPrefix
  file = tasks['buildZip'].outputs.files.singleFile
}

task uploadSwaggerDefinition(type: S3UploadTask) {
  region = awsregion
  bucket = binarybucket
  prefix = uploadPrefix
  file = file('swagger.yaml')
}

task deploy(type: DeployTask, dependsOn: [uploadZip, uploadSwaggerDefinition]) {
  region = awsregion
  codeUri = tasks['uploadZip'].s3Url
  swaggerUri = tasks['uploadSwaggerDefinition'].s3Url
  template = file('template.yaml')
  stage = 'test'
}

build.dependsOn buildZip

task vscodeClasspathFile {
    description 'Generates classpath file for the Visual Studio Code java plugin'
    ext.destFile = file("classpath.txt")
    outputs.file destFile
    doLast {
        def classpathString = configurations.compile.collect{ it.absolutePath }.join(':')
        if(!destFile.parentFile.exists()) {
            assert destFile.parentFile.mkdir()
        }
        destFile.text = classpathString
    }
}

task vscodeJavaconfigFile(dependsOn: vscodeClasspathFile) {
    description 'Generates javaconfig.json file for the Visual Studio Code java plugin'

    def relativePath = { File f ->
        f.absolutePath - "${project.rootDir.absolutePath}/"
    }
    ext.destFile = file("javaconfig.json")
    ext.config = [
        sourcePath: sourceSets.collect{ it.java.srcDirs }.flatten().collect{ relativePath(it) },
        classPathFile: relativePath(tasks.getByPath(':vscodeClasspathFile').outputs.files.singleFile),
        outputDirectory: relativePath(new File(buildDir, 'vscode-classes'))
    ]
    doLast {
        def jsonContent = groovy.json.JsonOutput.toJson(ext.config)
        destFile.text = groovy.json.JsonOutput.prettyPrint(jsonContent)
    }
}

task vscode(dependsOn: vscodeJavaconfigFile) {
    description 'Generates config files for the Visual Studio Code java plugin'
    group 'vscode'
}
